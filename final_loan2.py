# -*- coding: utf-8 -*-
"""final_loan2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrtNJZCotNoXhkUh09X-7tZKMA3Z1Bgv
"""

import streamlit as st
import joblib
import pandas as pd
import numpy as np
import shap
import dice_ml
from dice_ml.utils import helpers
import time
from interpret.glassbox import ExplainableBoostingClassifier

# Custom CSS for Loan Approval Styling
st.markdown("""
    <style>
    .main {
        background-color: #f5f5f5;
    }
    .stButton>button {
        background-color: #4a6fa5;
        color: white;
        padding: 10px 24px;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #3a5a80;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .stForm {
        background-color: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-bottom: 20px;
    }
    .stNumberInput label, .stSelectbox label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }
    .stSuccess {
        background-color: #d4edda;
        color: #155724;
        border-radius: 8px;
        padding: 15px;
        border-left: 5px solid #28a745;
    }
    .stError {
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 8px;
        padding: 15px;
        border-left: 5px solid #dc3545;
    }
    .stWarning {
        background-color: #fff3cd;
        color: #856404;
        border-radius: 8px;
        padding: 15px;
        border-left: 5px solid #ffc107;
    }
    h1, h2, h3 {
        color: #2c3e50;
        font-weight: 700;
    }
    .header {
        background-color: #4a6fa5;
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 30px;
    }
    .feature-box {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        border-left: 4px solid #4a6fa5;
    }
    </style>
""", unsafe_allow_html=True)

# Load model and data - REPLACE WITH YOUR ACTUAL MODEL AND DATA
@st.cache_resource
def load_model():
    try:
        # Example with German Credit Dataset
        from sklearn.datasets import fetch_openml
        credit = fetch_openml('credit-g', as_frame=True)
        X = credit.frame.drop('class', axis=1)
        y = (credit.frame['class'] == 'good').astype(int)

        # Convert categoricals
        cat_cols = X.select_dtypes(include=['object', 'category']).columns
        for col in cat_cols:
            X[col] = pd.factorize(X[col])[0]

        # Train EBM model (in reality, you would load your pretrained model)
        ebm = ExplainableBoostingClassifier(random_state=42)
        ebm.fit(X, y)

        return ebm, X, y
    except Exception as e:
        st.error(f"Error loading model: {e}")
        st.stop()

ebm, X_ref, y_ref = load_model()

# Define features for loan approval domain
model_features = [
    'checking_account', 'duration', 'credit_history', 'purpose', 'amount',
    'savings', 'employment', 'installment_rate', 'personal_status',
    'debtors', 'residence', 'property', 'age', 'other_plans',
    'housing', 'existing_credits', 'job', 'dependents', 'telephone', 'foreign'
]

changeable_features = [
    'checking_account', 'savings', 'employment', 'amount',
    'duration', 'purpose', 'other_plans'
]

# Input processing
def process_loan_applicant(input_dict, expected_features):
    missing = [f for f in expected_features if f not in input_dict]
    extra = [f for f in input_dict if f not in expected_features]
    if missing:
        raise ValueError(f"Missing features: {missing}")
    if extra:
        st.warning(f"Ignoring extra features: {extra}")

    input_df = pd.DataFrame([input_dict], columns=expected_features)
    if input_df.isna().any().any():
        raise ValueError("Input contains missing values.")

    # Convert categoricals same as training data
    cat_cols = ['checking_account', 'credit_history', 'purpose', 'savings',
               'employment', 'personal_status', 'debtors', 'property',
               'other_plans', 'housing', 'job', 'telephone', 'foreign']
    for col in cat_cols:
        if col in input_df:
            input_df[col] = pd.factorize(input_df[col])[0]

    return input_df

# Generate loan-specific suggestions
def generate_loan_suggestions(model, input_df, changeable_features, model_features, X_ref, y_ref):
    prediction = model.predict(input_df)[0]
    prob = model.predict_proba(input_df)[0]
    result = {
        'prediction': 'Approved' if prediction == 1 else 'Rejected',
        'probability': prob[1],
        'explanation': None,
        'suggestions': []
    }

    # DiCE setup
    X_dice = X_ref[model_features]
    d = dice_ml.Data(
        dataframe=pd.concat([X_dice, y_ref], axis=1),
        continuous_features=['duration', 'amount', 'installment_rate', 'residence', 'age', 'existing_credits'],
        outcome_name=y_ref.name
    )
    m = dice_ml.Model(model=model, backend='sklearn')
    exp = dice_ml.Dice(d, m, method='random')

    if prediction == 0:  # Rejected
        # SHAP explanation
        explainer = shap.Explainer(model.predict_proba, X_ref)
        shap_values = explainer(input_df)
        shap_values_array = shap_values.values[:, :, 1]

        shap_contributions = pd.DataFrame({
            'feature': model_features,
            'shap_value': shap_values_array[0]
        })
        most_negative = shap_contributions[shap_contributions['shap_value'] < 0].sort_values(by='shap_value').iloc[0]
        result['explanation'] = {
            'feature': most_negative['feature'],
            'shap_value': most_negative['shap_value']
        }

        # DiCE counterfactuals to flip to Approved
        counterfactuals = exp.generate_counterfactuals(
            query_instances=input_df,
            total_CFs=3,
            desired_class="opposite",
            features_to_vary=changeable_features,
            permitted_range={
                'amount': [0, input_df['amount'].iloc[0] * 1.5],
                'duration': [1, input_df['duration'].iloc[0] * 0.7]
            },
            random_seed=42
        )

        cf_df = counterfactuals.cf_examples_list[0].final_cfs_df
        if cf_df is not None:
            for i, cf in cf_df.iterrows():
                cf_features = pd.DataFrame([cf[X_dice.columns]], columns=X_dice.columns)
                cf_pred = model.predict(cf_features)[0]
                cf_prob = model.predict_proba(cf_features)[0][1]
                changes = []
                for feature in changeable_features:
                    original_val = input_df[feature].iloc[0]
                    cf_val = cf[feature]
                    if not np.isclose(original_val, cf_val, atol=1e-5):
                        if feature == 'checking_account':
                            advice = f"Improve checking account status (current: {original_val})"
                        elif feature == 'savings':
                            advice = f"Increase savings balance (current: {original_val})"
                        elif feature == 'employment':
                            advice = f"Show longer employment history (current: {original_val} years)"
                        elif feature == 'amount':
                            advice = f"Reduce loan amount to {cf_val:.2f} (current: {original_val:.2f})"
                        elif feature == 'duration':
                            advice = f"Shorten loan duration to {cf_val} months (current: {original_val})"
                        elif feature == 'purpose':
                            advice = f"Change loan purpose (current code: {original_val})"
                        changes.append({'feature': feature, 'advice': advice, 'new_value': cf_val})

                if changes and cf_pred == 1:
                    result['suggestions'].append({
                        'probability': cf_prob,
                        'changes': changes
                    })

    return result

# Streamlit App
st.markdown('<div class="header"><h1>Loan Approval Predictor</h1><p>Get instant loan decisions with AI-powered explanations</p></div>', unsafe_allow_html=True)

with st.form("loan_form"):
    st.subheader("Applicant Information")

    col1, col2 = st.columns(2)

    with col1:
        checking_account = st.selectbox(
            "Checking Account Status",
            options=["A11", "A12", "A13", "A14"],
            format_func=lambda x: {
                "A11": "< 0 DM",
                "A12": "0-200 DM",
                "A13": ">= 200 DM",
                "A14": "no checking account"
            }[x]
        )
        duration = st.number_input(
            "Loan Duration (months)",
            min_value=4, max_value=72, value=12, step=1
        )
        credit_history = st.selectbox(
            "Credit History",
            options=["A30", "A31", "A32", "A33", "A34"],
            format_func=lambda x: {
                "A30": "No credits taken",
                "A31": "All credits paid duly",
                "A32": "Existing credits paid duly",
                "A33": "Delay in paying off",
                "A34": "Critical account"
            }[x]
        )
        amount = st.number_input(
            "Loan Amount (DM)",
            min_value=250, max_value=20000, value=2000, step=100
        )
        savings = st.selectbox(
            "Savings Account/Bonds",
            options=["A61", "A62", "A63", "A64", "A65"],
            format_func=lambda x: {
                "A61": "< 100 DM",
                "A62": "100-500 DM",
                "A63": "500-1000 DM",
                "A64": ">= 1000 DM",
                "A65": "unknown/no savings"
            }[x]
        )

    with col2:
        employment = st.selectbox(
            "Employment Duration",
            options=["A71", "A72", "A73", "A74", "A75"],
            format_func=lambda x: {
                "A71": "unemployed",
                "A72": "< 1 year",
                "A73": "1-4 years",
                "A74": "4-7 years",
                "A75": ">= 7 years"
            }[x]
        )
        installment_rate = st.number_input(
            "Installment Rate (% of income)",
            min_value=1, max_value=4, value=2, step=1
        )
        personal_status = st.selectbox(
            "Personal Status",
            options=["A91", "A92", "A93", "A94", "A95"],
            format_func=lambda x: {
                "A91": "male: divorced/separated",
                "A92": "female: divorced/separated/married",
                "A93": "male: single",
                "A94": "male: married/widowed",
                "A95": "female: single"
            }[x]
        )
        age = st.number_input(
            "Age (years)",
            min_value=19, max_value=75, value=30, step=1
        )
        housing = st.selectbox(
            "Housing",
            options=["A151", "A152", "A153"],
            format_func=lambda x: {
                "A151": "rent",
                "A152": "own",
                "A153": "for free"
            }[x]
        )

    submitted = st.form_submit_button("Check Approval")

if submitted:
    input_dict = {
        'checking_account': checking_account,
        'duration': duration,
        'credit_history': credit_history,
        'purpose': "A43",  # Example purpose
        'amount': amount,
        'savings': savings,
        'employment': employment,
        'installment_rate': installment_rate,
        'personal_status': personal_status,
        'debtors': "A101",  # Example
        'residence': 2,  # Example
        'property': "A121",  # Example
        'age': age,
        'other_plans': "A141",  # Example
        'housing': housing,
        'existing_credits': 1,  # Example
        'job': "A171",  # Example
        'dependents': 1,  # Example
        'telephone': "A191",  # Example
        'foreign': "A201"  # Example
    }

    try:
        input_df = process_loan_applicant(input_dict, model_features)

        with st.spinner("Analyzing your loan application..."):
            time.sleep(1)
            result = generate_loan_suggestions(ebm, input_df, changeable_features, model_features, X_ref, y_ref)

        st.subheader("Loan Decision")
        col_result, col_prob = st.columns(2)
        with col_result:
            if result['prediction'] == 'Approved':
                st.markdown('<div class="stSuccess"><h3>✅ Loan Approved</h3></div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="stError"><h3>❌ Loan Rejected</h3></div>', unsafe_allow_html=True)
        with col_prob:
            st.metric("Approval Probability", f"{result['probability']:.1%}")

        if result['prediction'] == 'Approved':
            st.markdown("""
            <div class="stSuccess">
            <h4>Congratulations!</h4>
            <p>Your loan application has been approved based on our assessment.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="feature-box">
            <h4>Primary Reason for Rejection</h4>
            <p>The most significant factor affecting your application is <strong>{result['explanation']['feature']}</strong>,
            which reduced your approval probability by <strong>{abs(result['explanation']['shap_value']):.3f}</strong>.</p>
            </div>
            """, unsafe_allow_html=True)

            if result['suggestions']:
                st.subheader("Suggested Improvements")
                for i, suggestion in enumerate(result['suggestions'], 1):
                    with st.expander(f"Suggestion {i} (Potential Approval Probability: {suggestion['probability']:.1%})"):
                        for change in suggestion['changes']:
                            st.markdown(f"""
                            <div class="feature-box">
                            <p><strong>{change['feature'].replace('_', ' ').title()}:</strong> {change['advice']}</p>
                            </div>
                            """, unsafe_allow_html=True)
            else:
                st.warning("No specific suggestions available. Please consult with a loan officer.")

    except Exception as e:
        st.error(f"Error processing application: {str(e)}")

# Add footer
st.markdown("""
---
<p style="text-align: center; color: #666;">
This AI-powered loan approval system uses Explainable Boosting Machine (EBM) for transparent decision making.
</p>
""", unsafe_allow_html=True)
